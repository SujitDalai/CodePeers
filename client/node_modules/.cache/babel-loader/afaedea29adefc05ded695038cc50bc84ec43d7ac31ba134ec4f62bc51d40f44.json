{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromCodePoint = String.fromCodePoint || function (astralCodePoint) {\n  return String.fromCharCode(Math.floor((astralCodePoint - 65536) / 1024) + 55296, (astralCodePoint - 65536) % 1024 + 56320);\n};\nexports.getCodePoint = String.prototype.codePointAt ? function (input, position) {\n  return input.codePointAt(position);\n} : function (input, position) {\n  return (input.charCodeAt(position) - 55296) * 1024 + input.charCodeAt(position + 1) - 56320 + 65536;\n};\nexports.highSurrogateFrom = 55296;\nexports.highSurrogateTo = 56319;","map":{"version":3,"sources":["C:\\Users\\sujit\\OneDrive\\Desktop\\CodePeers\\client\\node_modules\\html-entities\\src\\surrogate-pairs.ts"],"names":["exports","String","fromCodePoint","astralCodePoint","fromCharCode","Math","floor","prototype","codePointAt","input","position","charCodeAt"],"mappings":";;;;;AAAaA,OAAAA,CAAAA,aAAAA,GACTC,MAAAA,CAAOC,aAAAA,IACP,UAAUC,eAAAA,EAAAA;EACN,OAAOF,MAAAA,CAAOG,YAAAA,CACVC,IAAAA,CAAKC,KAAAA,CAAAA,CAAOH,eAAAA,GAAkB,KAAA,IAAW,IAAA,CAAA,GAAS,KAAA,EAAA,CAChDA,eAAAA,GAAkB,KAAA,IAAW,IAAA,GAAS,KAAA,CAEhD;AAAA,CAAA;AAESH,OAAAA,CAAAA,YAAAA,GAAeC,MAAAA,CAAOM,SAAAA,CAAUC,WAAAA,GACvC,UAAUC,KAAAA,EAAeC,QAAAA,EAAAA;EACrB,OAAOD,KAAAA,CAAMD,WAAAA,CAAYE,QAAAA,CAC7B;AAAA,CAAA,GACA,UAAUD,KAAAA,EAAeC,QAAAA,EAAAA;EACrB,OAAA,CAAQD,KAAAA,CAAME,UAAAA,CAAWD,QAAAA,CAAAA,GAAY,KAAA,IAAU,IAAA,GAAQD,KAAAA,CAAME,UAAAA,CAAWD,QAAAA,GAAW,CAAA,CAAA,GAAK,KAAA,GAAS,KACrG;AAAA,CAAA;AAEOV,OAAAA,CAAAA,iBAAAA,GAAoB,KAAA;AACpBA,OAAAA,CAAAA,eAAAA,GAAkB,KAAA","sourcesContent":["export const fromCodePoint =\n    String.fromCodePoint ||\n    function (astralCodePoint: number) {\n        return String.fromCharCode(\n            Math.floor((astralCodePoint - 0x10000) / 0x400) + 0xd800,\n            ((astralCodePoint - 0x10000) % 0x400) + 0xdc00\n        );\n    };\n\nexport const getCodePoint = String.prototype.codePointAt\n    ? function (input: string, position: number) {\n          return input.codePointAt(position);\n      }\n    : function (input: string, position: number) {\n          return (input.charCodeAt(position) - 0xd800) * 0x400 + input.charCodeAt(position + 1) - 0xdc00 + 0x10000;\n      };\n\nexport const highSurrogateFrom = 0xd800;\nexport const highSurrogateTo = 0xdbff;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}