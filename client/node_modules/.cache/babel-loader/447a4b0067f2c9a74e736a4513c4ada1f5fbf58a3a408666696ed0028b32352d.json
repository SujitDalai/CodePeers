{"ast":null,"code":"import api from '../utils/api';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  try {\n    const res = await api.get('/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// Register User\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    githubusername,\n    password\n  } = _ref;\n  return async dispatch => {\n    const body = {\n      name,\n      email,\n      githubusername,\n      password\n    };\n    try {\n      const res = await api.post('/users', body);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      }\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n};\n\n// Login User\nexport const login = (email, password) => async dispatch => {\n  const body = {\n    email,\n    password\n  };\n  try {\n    const res = await api.post('/auth', body);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\n\n// Logout/Clear Profile\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["api","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","loadUser","dispatch","res","get","type","payload","data","err","register","name","email","githubusername","password","body","post","errors","response","forEach","error","msg","login","logout"],"sources":["C:/Users/sujit/Downloads/dev-book-master/dev-book-master/client/src/actions/auth.js"],"sourcesContent":["import api from '../utils/api';\nimport { setAlert } from './alert';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n} from './types';\n\n// Load User\nexport const loadUser = () => async (dispatch) => {\n  try {\n    const res = await api.get('/auth');\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({ type: AUTH_ERROR });\n  }\n};\n\n// Register User\nexport const register =\n  ({ name, email, githubusername, password }) =>\n  async (dispatch) => {\n    const body = { name, email, githubusername, password };\n\n    try {\n      const res = await api.post('/users', body);\n\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data,\n      });\n\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n      }\n\n      dispatch({ type: REGISTER_FAIL });\n    }\n  };\n\n// Login User\nexport const login = (email, password) => async (dispatch) => {\n  const body = { email, password };\n\n  try {\n    const res = await api.post('/auth', body);\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({ type: LOGIN_FAIL });\n  }\n};\n\n// Logout/Clear Profile\nexport const logout = () => (dispatch) => {\n  dispatch({ type: LOGOUT });\n};\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,cAAc;AAC9B,SAASC,QAAQ,QAAQ,SAAS;AAClC,SACEC,gBAAgB,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,aAAa,EACbC,UAAU,EACVC,MAAM,QACD,SAAS;;AAEhB;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAQ,IAAK;EAChD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMX,GAAG,CAACY,GAAG,CAAC,OAAO,CAAC;IAElCF,QAAQ,CAAC;MACPG,IAAI,EAAET,WAAW;MACjBU,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZN,QAAQ,CAAC;MAAEG,IAAI,EAAER;IAAW,CAAC,CAAC;EAChC;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,QAAQ,GACnB;EAAA,IAAC;IAAEC,IAAI;IAAEC,KAAK;IAAEC,cAAc;IAAEC;EAAS,CAAC;EAAA,OAC1C,MAAOX,QAAQ,IAAK;IAClB,MAAMY,IAAI,GAAG;MAAEJ,IAAI;MAAEC,KAAK;MAAEC,cAAc;MAAEC;IAAS,CAAC;IAEtD,IAAI;MACF,MAAMV,GAAG,GAAG,MAAMX,GAAG,CAACuB,IAAI,CAAC,QAAQ,EAAED,IAAI,CAAC;MAE1CZ,QAAQ,CAAC;QACPG,IAAI,EAAEX,gBAAgB;QACtBY,OAAO,EAAEH,GAAG,CAACI;MACf,CAAC,CAAC;MAEFL,QAAQ,CAACD,QAAQ,EAAE,CAAC;IACtB,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZ,MAAMQ,MAAM,GAAGR,GAAG,CAACS,QAAQ,CAACV,IAAI,CAACS,MAAM;MACvC,IAAIA,MAAM,EAAE;QACVA,MAAM,CAACE,OAAO,CAAEC,KAAK,IAAKjB,QAAQ,CAACT,QAAQ,CAAC0B,KAAK,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;MACpE;MAEAlB,QAAQ,CAAC;QAAEG,IAAI,EAAEV;MAAc,CAAC,CAAC;IACnC;EACF,CAAC;AAAA;;AAEH;AACA,OAAO,MAAM0B,KAAK,GAAG,CAACV,KAAK,EAAEE,QAAQ,KAAK,MAAOX,QAAQ,IAAK;EAC5D,MAAMY,IAAI,GAAG;IAAEH,KAAK;IAAEE;EAAS,CAAC;EAEhC,IAAI;IACF,MAAMV,GAAG,GAAG,MAAMX,GAAG,CAACuB,IAAI,CAAC,OAAO,EAAED,IAAI,CAAC;IAEzCZ,QAAQ,CAAC;MACPG,IAAI,EAAEP,aAAa;MACnBQ,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;IAEFL,QAAQ,CAACD,QAAQ,EAAE,CAAC;EACtB,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZ,MAAMQ,MAAM,GAAGR,GAAG,CAACS,QAAQ,CAACV,IAAI,CAACS,MAAM;IACvC,IAAIA,MAAM,EAAE;MACVA,MAAM,CAACE,OAAO,CAAEC,KAAK,IAAKjB,QAAQ,CAACT,QAAQ,CAAC0B,KAAK,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IACpE;IAEAlB,QAAQ,CAAC;MAAEG,IAAI,EAAEN;IAAW,CAAC,CAAC;EAChC;AACF,CAAC;;AAED;AACA,OAAO,MAAMuB,MAAM,GAAG,MAAOpB,QAAQ,IAAK;EACxCA,QAAQ,CAAC;IAAEG,IAAI,EAAEL;EAAO,CAAC,CAAC;AAC5B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}